export interface SDKOptions {
    /**
     * When set to `true`, all logs will be printed to console.
     */
    debug?: boolean;
    /**
     * When set to `true`, the extensions will be loaded and executed.
     */
    disabled?: boolean;
}
export interface SDKExtension {
    /**
     * A link to the CDN from which to load the extension executable file.
     */
    cdnURL: string;
    /**
     * Extension ID.
     */
    id: string;
}
export declare enum event {
    /**
     * The event is triggered when the dashboard loads a new set of analytics data.
     * For example, when user opens dashboard for the first time, changes the data range or time bucket.
     */
    LOAD = "load",
    /**
     * The event is triggered when user changes the filters.
     */
    FILTERS_UPDATE = "filtersupdate",
    /**
     * The event is triggered when user changes the time bucket, time perios or sets the date range.
     */
    TIME_UPDATE = "timeupdate",
    /**
     * The event is triggered on load and it supplies information about the project it's running on.
     */
    PROJECT_INFO = "projectinfo",
    /**
     * Contains the client metainfo (theme, language, etc.).
     */
    CLIENT_INFO = "clientinfo"
}
export declare enum PanelTab {
    cc = "cc",
    pg = "pg",
    lc = "lc",
    ref = "ref",
    dv = "dv",
    br = "br",
    os = "os",
    so = "so",
    me = "me",
    ca = "ca",
    lt = "lt",
    ce = "ce"
}
declare type SwetrixCallbacks = {
    onAddExportDataRow: (name: string, onClick: () => void) => void;
    onRemoveExportDataRow: (name: string) => void;
    onAddPanelTab: (extensionID: string, panelID: string, tabContent?: string, onClick?: () => void) => void;
    onUpdatePanelTab: (extensionID: string, panelID: string, tabContent?: string) => void;
    onRemovePanelTab: (extensionID: string, panelID: string) => void;
};
/**
 * Initialise the SDK instance.
 *
 * @param {SDKExtension[]} extensions A list of extension to load and execute.
 * @param {SDKOptions} options SDK options.
 * @param {SwetrixCallbacks} swetrixCallbacks Callbacks to interact with Swetrix website.
 * @returns {SDK} Instance of the Swetrix SDK.
 */
export declare class SDK {
    private extensions;
    private options?;
    private swetrixCallbacks?;
    private events;
    private exportDataRowValues;
    private panelTabValues;
    private _sdkInitialised;
    private _emitQueue;
    /**
     * Initialise the SDK instance.
     *
     * @param {SDKExtension[]} extensions A list of extension to load and execute.
     * @param {SDKOptions} options Swetrix SDK options.
     * @param {SwetrixCallbacks} swetrixCallbacks Callbacks to interact with Swetrix website.
     */
    constructor(extensions: SDKExtension[], options?: SDKOptions | undefined, swetrixCallbacks?: SwetrixCallbacks | undefined);
    private _init;
    private _loadExtension;
    private debug;
    _emitEvent(event: event, eventData: any): void;
    _destroy(): void;
    addEventListener(extensionID: string): (event: event, callback: (eventData: any) => any) => void;
    removeEventListener(extensionID: string): (event: event) => void;
    /**
     * Add a new export data row into the dropdown.
     *
     * @param name The name of the export data row.
     * @param onClick The callback to execute when the export data row is clicked.
     * @returns {void}
     */
    addExportDataRow(name: string, onClick: () => void): void;
    /**
     * Remove an export data row from the dropdown.
     *
     * @param name The name of the export data row.
     * @returns {void}
     */
    removeExportDataRow(name: string): void;
    addPanelTab(extensionID: string): (panelID: PanelTab, tabContent?: string, onOpen?: () => void) => void;
    updatePanelTab(extensionID: string): (panelID: PanelTab, tabContent?: string) => void;
    removePanelTab(extensionID: string): (panelID: PanelTab) => void;
}
export {};
