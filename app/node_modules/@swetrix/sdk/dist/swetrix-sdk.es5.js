/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

var getPanelTabName = function (extensionID, name) { return "".concat(extensionID, "-").concat(name); };

var event;
(function (event) {
    /**
     * The event is triggered when the dashboard loads a new set of analytics data.
     * For example, when user opens dashboard for the first time, changes the data range or time bucket.
     */
    event["LOAD"] = "load";
    /**
     * The event is triggered when user changes the filters.
     */
    event["FILTERS_UPDATE"] = "filtersupdate";
    /**
     * The event is triggered when user changes the time bucket, time perios or sets the date range.
     */
    event["TIME_UPDATE"] = "timeupdate";
    /**
     * The event is triggered on load and it supplies information about the project it's running on.
     */
    event["PROJECT_INFO"] = "projectinfo";
    /**
     * Contains the client metainfo (theme, language, etc.).
     */
    event["CLIENT_INFO"] = "clientinfo";
})(event || (event = {}));
var PanelTab;
(function (PanelTab) {
    PanelTab["cc"] = "cc";
    PanelTab["pg"] = "pg";
    PanelTab["lc"] = "lc";
    PanelTab["ref"] = "ref";
    PanelTab["dv"] = "dv";
    PanelTab["br"] = "br";
    PanelTab["os"] = "os";
    PanelTab["so"] = "so";
    PanelTab["me"] = "me";
    PanelTab["ca"] = "ca";
    PanelTab["lt"] = "lt";
    PanelTab["ce"] = "ce";
})(PanelTab || (PanelTab = {}));
var DebugType;
(function (DebugType) {
    DebugType["LOG"] = "log";
    DebugType["ERROR"] = "error";
    DebugType["WARN"] = "warn";
    DebugType["INFO"] = "info";
})(DebugType || (DebugType = {}));
/**
 * Initialise the SDK instance.
 *
 * @param {SDKExtension[]} extensions A list of extension to load and execute.
 * @param {SDKOptions} options SDK options.
 * @param {SwetrixCallbacks} swetrixCallbacks Callbacks to interact with Swetrix website.
 * @returns {SDK} Instance of the Swetrix SDK.
 */
var SDK = /** @class */ (function () {
    /**
     * Initialise the SDK instance.
     *
     * @param {SDKExtension[]} extensions A list of extension to load and execute.
     * @param {SDKOptions} options Swetrix SDK options.
     * @param {SwetrixCallbacks} swetrixCallbacks Callbacks to interact with Swetrix website.
     */
    function SDK(extensions, options, swetrixCallbacks) {
        var _this = this;
        this.extensions = extensions;
        this.options = options;
        this.swetrixCallbacks = swetrixCallbacks;
        this.events = {};
        this.exportDataRowValues = [];
        this.panelTabValues = [];
        this._sdkInitialised = false;
        this._emitQueue = [];
        this._loadExtension = function (cdnURL, id) {
            return fetch(cdnURL)
                // Parse the response as text, return a dummy script if the response is not ok
                .then(function (res) {
                if (!res.ok) {
                    _this.debug("Error while loading extension from ".concat(cdnURL), DebugType.ERROR);
                    return '(() => {})';
                }
                return res.text();
            })
                // Execute the extension
                .then(function (code) {
                eval(code)(__assign(__assign({}, _this), { 
                    // Keeping this here as for some reason ...this does not include the methods
                    addExportDataRow: _this.addExportDataRow, debug: _this.debug, removeExportDataRow: _this.removeExportDataRow, 
                    // Presetting functions which require extension id
                    addPanelTab: _this.addPanelTab(id), updatePanelTab: _this.updatePanelTab(id), removePanelTab: _this.removePanelTab(id), addEventListener: _this.addEventListener(id), removeEventListener: _this.removeEventListener(id), 
                    // Functions that should not be exposed to the extensions
                    _emitEvent: undefined, _destroy: undefined, _loadExtension: undefined, _init: undefined, _emitQueue: undefined }));
                _this.debug("Extension ".concat(id, " loaded and executed"));
            });
        };
        this._init();
    }
    SDK.prototype._init = function () {
        var _this = this;
        var _a;
        if (this._sdkInitialised) {
            this.debug('SDK is already initialised, skipping initialisation');
            return;
        }
        if ((_a = this.options) === null || _a === void 0 ? void 0 : _a.disabled) {
            this.debug('SDK is disabled, skipping initialisation');
            return;
        }
        var promisified = this.extensions.map(function (_a) {
            var cdnURL = _a.cdnURL, id = _a.id;
            return _this._loadExtension(cdnURL, id);
        });
        Promise.all(promisified)
            .then(function () {
            _this.debug('SDK initialised');
            _this._sdkInitialised = true;
            _this._emitQueue.forEach(function (_a) {
                var event = _a.event, eventData = _a.eventData;
                _this._emitEvent(event, eventData);
            });
            _this._emitQueue = [];
        });
    };
    SDK.prototype.debug = function (message, type) {
        var _a;
        if (type === void 0) { type = DebugType.LOG; }
        if ((_a = this.options) === null || _a === void 0 ? void 0 : _a.debug) {
            console[type]('[Swetrix SDK]', message);
        }
    };
    SDK.prototype._emitEvent = function (event, eventData) {
        if (!this._sdkInitialised) {
            this.debug("Trying to emit event '".concat(event, "', but it as added to queue as the SDK is not initialised yet"), DebugType.WARN);
            this._emitQueue.push({ event: event, eventData: eventData });
            return;
        }
        this.debug("Emitting event '".concat(event, "'"));
        if (this.events[event]) {
            // @ts-ignore - TS does not like the fact that we are iterating over an object
            Object.values(this.events[event]).forEach(function (callback) {
                // Adding a delay before calling events to make sure that the dashboard has time to render
                // in case some callbacks taking a long time to execute
                setTimeout(function () {
                    callback(eventData);
                }, 300);
            });
        }
    };
    SDK.prototype._destroy = function () {
        this.debug('Destroying the SDK instance');
        this.events = {};
        this.extensions = [];
    };
    // -----------
    // Public methods that are avaliable to the extension developers.
    // -----------
    SDK.prototype.addEventListener = function (extensionID) {
        var _this = this;
        /**
         * Add an event listener.
         *
         * @param {event} event The event to listen to.
         * @param {(eventData: any) => any} callback The callback to execute when the event is triggered.
         * @returns {void}
         */
        return function (event, callback) {
            var _a, _b;
            _this.debug("Adding event listener for ".concat(event, " (extension: ").concat(extensionID, ")"));
            if (typeof callback !== 'function') {
                _this.debug("Callback is not a function (extension: ".concat(extensionID, ")"), DebugType.ERROR);
                return;
            }
            _this.events = __assign(__assign({}, _this.events), (_a = {}, _a[event] = __assign(__assign({}, _this.events[event]), (_b = {}, _b[extensionID] = callback, _b)), _a));
        };
    };
    SDK.prototype.removeEventListener = function (extensionID) {
        var _this = this;
        /**
         * Remove an event listener.
         *
         * @param {event} event The event to remove the listener from.
         * @returns {void}
         */
        return function (event) {
            var _a;
            _this.debug("Removing event listener for ".concat(event));
            if (_this.events[event]) {
                (_a = _this.events[event]) === null || _a === void 0 ? true : delete _a[extensionID];
            }
        };
    };
    /**
     * Add a new export data row into the dropdown.
     *
     * @param name The name of the export data row.
     * @param onClick The callback to execute when the export data row is clicked.
     * @returns {void}
     */
    SDK.prototype.addExportDataRow = function (name, onClick) {
        var _a;
        this.debug("Adding export data row ".concat(name));
        if (this.exportDataRowValues.includes(name)) {
            this.debug("Export data row ".concat(name, " already exists"), DebugType.WARN);
            return;
        }
        this.exportDataRowValues.push(name);
        (_a = this.swetrixCallbacks) === null || _a === void 0 ? void 0 : _a.onAddExportDataRow(name, onClick);
    };
    /**
     * Remove an export data row from the dropdown.
     *
     * @param name The name of the export data row.
     * @returns {void}
     */
    SDK.prototype.removeExportDataRow = function (name) {
        var _a;
        this.debug("Removing export data row ".concat(name));
        if (!this.exportDataRowValues.includes(name)) {
            this.debug("Export data row ".concat(name, " does not exist"), DebugType.WARN);
            return;
        }
        this.exportDataRowValues = this.exportDataRowValues.filter(function (value) { return value !== name; });
        (_a = this.swetrixCallbacks) === null || _a === void 0 ? void 0 : _a.onRemoveExportDataRow(name);
    };
    SDK.prototype.addPanelTab = function (extensionID) {
        var _this = this;
        /**
         * Add a new panel tab into the dashboard panels.
         *
         * @param extensionID The ID of the extension.
         * @param panelID The ID of the panel.
         * @param onOpen The callback to execute when the panel tab is opened.
         * @returns {void}
         */
        return function (panelID, tabContent, onOpen) {
            var _a;
            if (onOpen === void 0) { onOpen = function () { }; }
            _this.debug("Adding panel tab ".concat(panelID));
            var panelName = getPanelTabName(extensionID, panelID);
            if (_this.panelTabValues.includes(panelName)) {
                _this.debug("Panel tab ".concat(panelID, " (").concat(extensionID, ") already exists"), DebugType.WARN);
                return;
            }
            _this.panelTabValues.push(panelName);
            (_a = _this.swetrixCallbacks) === null || _a === void 0 ? void 0 : _a.onAddPanelTab(extensionID, panelID, tabContent, onOpen);
        };
    };
    SDK.prototype.updatePanelTab = function (extensionID) {
        var _this = this;
        /**
         * Update a panel tab in the dashboard panels.
         *
         * @param extensionID The ID of the extension.
         * @param panelID The ID of the panel.
         * @param tabContent The new content of the panel tab.
         * @returns {void}
         */
        return function (panelID, tabContent) {
            var _a;
            _this.debug("Updating panel tab ".concat(panelID));
            var panelName = getPanelTabName(extensionID, panelID);
            if (!_this.panelTabValues.includes(panelName)) {
                _this.debug("Panel tab ".concat(panelID, " (").concat(extensionID, ") does not exist"), DebugType.WARN);
                return;
            }
            (_a = _this.swetrixCallbacks) === null || _a === void 0 ? void 0 : _a.onUpdatePanelTab(extensionID, panelID, tabContent);
        };
    };
    SDK.prototype.removePanelTab = function (extensionID) {
        var _this = this;
        /**
         * Remove a panel tab from the dashboard panels.
         *
         * @param panelID The ID of the panel.
         * @returns {void}
         */
        return function (panelID) {
            var _a;
            _this.debug("Removing panel tab ".concat(panelID));
            var panelName = getPanelTabName(extensionID, panelID);
            if (!_this.panelTabValues.includes(panelName)) {
                _this.debug("Panel tab ".concat(panelID, " (").concat(extensionID, ") does not exist"), DebugType.WARN);
                return;
            }
            (_a = _this.swetrixCallbacks) === null || _a === void 0 ? void 0 : _a.onRemovePanelTab(extensionID, panelID);
        };
    };
    return SDK;
}());

export { SDK as default };
