import {
  buildSitemap,
  getConfig,
  isRobotsUrl,
  isSitemapUrl,
  robotsResponse
} from "./chunk-ZNF4YBVV.mjs";

// src/sitemap.ts
async function sitemapResponse(config, request, context) {
  const { cache } = config;
  if (cache) {
    const cached = await cache.get();
    if (cached) {
      const bytes2 = new TextEncoder().encode(cached).byteLength;
      return new Response(cached, {
        headers: {
          ...config.headers || {},
          "Content-Type": "application/xml",
          "Content-Length": bytes2.toString()
        }
      });
    }
  }
  const sitemap = await buildSitemap({
    config,
    context,
    request
  });
  if (cache)
    await cache.set(sitemap);
  const bytes = new TextEncoder().encode(sitemap).byteLength;
  return new Response(sitemap, {
    headers: {
      ...config.headers || {},
      "Content-Type": "application/xml",
      "Content-Length": bytes.toString()
    }
  });
}

// src/index.ts
var createSitemapGenerator = (config) => {
  const defaultConfig = getConfig(config);
  return {
    sitemap: (request, context) => {
      if (isSitemapUrl(defaultConfig, request)) {
        return sitemapResponse(defaultConfig, request, context);
      }
      if (defaultConfig.generateRobotsTxt && isRobotsUrl(request)) {
        return robotsResponse(defaultConfig);
      }
    },
    robots: () => robotsResponse(defaultConfig),
    experimental_sitemap: (request, routes) => {
      const routeModules = Object.keys(routes).reduce(
        (acc, route) => ({
          ...acc,
          [route]: routes[route].module
        }),
        {}
      );
      return sitemapResponse(defaultConfig, request, {
        routeModules,
        manifest: {
          routes
        }
      });
    },
    isSitemapUrl: (request) => isSitemapUrl(defaultConfig, request) || defaultConfig.generateRobotsTxt && isRobotsUrl(request)
  };
};
export {
  createSitemapGenerator
};
